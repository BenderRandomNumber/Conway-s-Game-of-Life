import Conways_Game_of_Life.TheGameOfLife as CG
import numpy as np


'Still life Patterns:'

block = np.array([[1, 1],
                  [1, 1]])

tub = np.array([[0, 1, 0],
               [1, 0, 1],
               [0, 1, 0]])

boat = np.array([[1, 1, 0],
                [1, 0, 1],
                [0, 1, 0]])


'Spaceship Patterns:'

glider = np.array([[0, 0, 1],
                   [1, 0, 1],
                   [0, 1, 1]])

spaceship = np.array([[0, 0, 1, 1, 0],
                     [1, 1, 0, 1, 1],
                     [1, 1, 1, 1, 0],
                     [0, 1, 1, 0, 0]])

lwss = np.array([[0, 1, 0, 0, 1],
                 [1, 0, 0, 0, 0],
                 [1, 0, 0, 0, 1],
                 [1, 1, 1, 1, 0]])

mwss = np.array([[0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 1],
                [1, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 1],
                [1, 1, 1, 1, 1, 0]])

hwss = np.array([[0, 0, 0, 1, 1, 0, 0],
                 [0, 1, 0, 0, 0, 0, 1],
                 [1, 0, 0, 0, 0, 0, 0],
                 [1, 0, 0, 0, 0, 0, 1],
                 [1, 1, 1, 1, 1, 1, 0]])

GosoperGliderGun = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                             [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
                             [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                             [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                             [1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                             [1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
                             [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                             [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                             [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

UFO = np.array([[0, 1, 1, 0, 0, 1, 1, 0],
                [0, 0, 0, 1, 1, 0, 0, 0],
                [0, 0, 0, 1, 1, 0, 0, 0],
                [1, 0, 1, 0, 0, 1, 0, 1],
                [1, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 1],
                [0, 1, 1, 0, 0, 1, 1, 0],
                [0, 0, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 1, 0, 0, 0],
                [0, 0, 0, 1, 1, 0, 0, 0]])


'Oscillators Patterns:'

quad_blinker = np.array([[0, 1, 0],
                        [1, 1, 1]])

blinker = np.array([[1],
                    [1],
                    [1]])

small_exploder = np.array([[0, 1, 0],
                           [1, 1, 1],
                           [1, 0, 1],
                           [0, 1, 0]])

pulsar = np.array([[1, 0, 1, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 1, 0, 1]])

ten_cell_row = np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])

beacon = np.array([[1, 1, 0, 0],
                   [1, 1, 0, 0],
                   [0, 0, 1, 1],
                   [0, 0, 1, 1]])

'Random Patterns'

def create_random_pattern(size):
    random = np.random.randint(0, 2, size)
    return random


'misc Patterns:'

die_hard = np.array([[0, 0, 0, 0, 0, 0, 1, 0],
                   [1, 1, 0, 0, 0, 0, 0, 0],
                   [0, 1, 0, 0, 0, 1, 1, 1]])

r_pentomino = np.array([[0, 1, 1],
                       [1, 1, 0],
                       [0, 1, 0]])

acorn = np.array([[0, 1, 0, 0, 0, 0, 0],
                 [0, 0, 0, 1, 0, 0, 0],
                 [1, 1, 0, 0, 1, 1, 1]])

my_name = np.array([[1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1],
                   [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1],
                   [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1],
                   [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1]])

def play_patter(pattern, size):
    starting_board = np.zeros(size, np.int64)
    starting_board[int((starting_board.shape[0]/2) - (pattern.shape[0]/2)) : int((starting_board.shape[0]/2) + (pattern.shape[0]/2)), int((starting_board.shape[1]/2) - (pattern.shape[1]/2)) : int((starting_board.shape[1]/2) + (pattern.shape[1]/2))] = pattern
    CG.TheGameOfLife.play_game(starting_board, -1, 1000, 10)


play_patter(hwss, (10, 30))

